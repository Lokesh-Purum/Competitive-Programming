# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        NoOfElements = 0
        temp = head
        while temp:
            NoOfElements += 1
            temp = temp.next
        appNoOfEleInResList = NoOfElements // k
        ExtraElementCount = 0
        if (k > NoOfElements):
            appNoOfEleInResList = 1
        else:
            ExtraElementCount = NoOfElements - appNoOfEleInResList * k
        iteratedcount = 0
        temp = head
        resultList = []
        while temp:
            if k == 1:
                resultList.append(head)
                k -= 1
                break
            iteratedcount += 1
            if iteratedcount == appNoOfEleInResList:
                if (ExtraElementCount > 0):
                    temp = temp.next
                    ExtraElementCount -= 1
                if temp:
                    temp2 = temp.next
                    temp.next = None
                    resultList.append(head)
                    temp = temp2
                    head = temp2
                    iteratedcount = 0
                    k -= 1
            else:
                temp = temp.next
        while k > 0:
            k -= 1
            resultList.append(ListNode(""))
        return resultList
